timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 05/12/2024 09:44:20 AM
// Design Name: 
// Module Name: display_ssegment
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////







module display_ssegment(
    input wire clk, // Clock input
    input wire rst, // Reset input
    input wire stop, // Stop signal
    output reg [3:0] dig, // Digit select signals
    output reg [6:0] seg, // 7-segment control signals
    output reg [5:0] out // 5 bit output for values 0 to 30

);
    
    reg [26:0] temp; // 27 bits for 100MHz clock
    reg [3:0] LED_BCD;
    reg [19:0] refresh_counter; // 20-bit for creating 10.5ms refresh period or 380Hz refresh rate
    wire [1:0] LED_activating_counter; 

    always @(posedge clk or posedge rst)
    begin
        if(rst)
            temp <= 0;
        else if(!stop) begin
            if(temp>=99999999) 
                 temp <= 0;
            else
                temp <= temp + 1;
        end
    end 

    assign LED_activating_counter = refresh_counter[19:18];

    always @(posedge clk or posedge rst)
    begin
        if(rst)
            out <= 0;
        else if(temp==99999999 && !stop)
            if(out < 30)
                out <= out + 1;
    end

    always @(posedge clk or posedge rst)
    begin 
        if(rst)
            refresh_counter <= 0;
        else
            refresh_counter <= refresh_counter + 1;
    end 

    always @(*)
    begin
        case(LED_activating_counter)
        2'b00: begin
            dig = 4'b1101; 
            LED_BCD = out/10;
              end
        2'b01: begin
            dig = 4'b1110; 
            LED_BCD = out % 10;
              end
        2'b10: begin
            dig = 4'b0111; 
            LED_BCD = 0;
                end
        2'b11: begin
            dig = 4'b1011; 
            LED_BCD = 0;
               end
        endcase
    end

    always @(*)
    begin
        case(LED_BCD)
        4'b0000: seg = 7'b0000001; // "0"     
        4'b0001: seg = 7'b1001111; // "1" 
        4'b0010: seg = 7'b0010010; // "2" 
        4'b0011: seg = 7'b0000110; // "3" 
        4'b0100: seg = 7'b1001100; // "4" 
        4'b0101: seg = 7'b0100100; // "5" 
        4'b0110: seg = 7'b0100000; // "6" 
        4'b0111: seg = 7'b0001111; // "7" 
        4'b1000: seg = 7'b0000000; // "8"     
        4'b1001: seg = 7'b0000100; // "9" 
        default: seg = 7'b0000000; // "nothing"
        endcase
